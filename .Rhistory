tumor_file, normal_file, sample_name)
email = 'clusterigtpmsubirana@gmail.com'
RtoSge::toSge(cores = cores,
name = name,
queue = queue,
log = log,
script = script,
email = email)
}
devtools::load_all('/imppc/labs/lplab/share/marc/repos/ergWgsTools')
bam_path <- '/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/bam/bwa'
bams <- list.files(bam_path,
pattern = "_BL.bam$",
full.names = T)
cluster_folder <- '/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/bam/bwa'
for(bam in bams){
normal_file <- bam
normal_file_bai <- paste0(normal_file, '.bai')
tumor_file <- gsub('_BL.bam', '_TI.bam', bam)
tumor_file_bai <- paste0(tumor_file, '.bai')
# file.copy(normal_file, cluster_folder)
# file.copy(normal_file_bai, cluster_folder)
# file.copy(tumor_file, cluster_folder)
# file.copy(tumor_file_bai, cluster_folder)
sample_name <- gsub("_.*", '', basename(bam))
# strelka2Calling
cores = 28
name = paste0(sample_name, '_strelka2Calling')
queue = 'imppcv3'
log = '/imppc/labs/lplab/share/marc/insulinomas/logs'
script = paste('Rscript /imppc/labs/lplab/share/marc/repos/ergWgsTools/tmp/strelka2Calling.R',
tumor_file, normal_file, sample_name)
email = 'clusterigtpmsubirana@gmail.com'
RtoSge::toSge(cores = cores,
name = name,
queue = queue,
log = log,
script = script,
email = email)
}
devtools::load_all('/imppc/labs/lplab/share/marc/repos/ergWgsTools')
bam_path <- '/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/bam/bwa'
bams <- list.files(bam_path,
pattern = "_BL.bam$",
full.names = T)
cluster_folder <- '/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/bam/bwa'
for(bam in bams){
normal_file <- bam
normal_file_bai <- paste0(normal_file, '.bai')
tumor_file <- gsub('_BL.bam', '_TI.bam', bam)
tumor_file_bai <- paste0(tumor_file, '.bai')
# file.copy(normal_file, cluster_folder)
# file.copy(normal_file_bai, cluster_folder)
# file.copy(tumor_file, cluster_folder)
# file.copy(tumor_file_bai, cluster_folder)
sample_name <- gsub("_.*", '', basename(bam))
# strelka2Calling
cores = 28
name = paste0(sample_name, '_strelka2Calling')
queue = 'imppcv3'
log = '/imppc/labs/lplab/share/marc/insulinomas/logs'
script = paste('Rscript /imppc/labs/lplab/share/marc/repos/ergWgsTools/tmp/strelka2Calling.R',
tumor_file, normal_file, sample_name)
email = 'clusterigtpmsubirana@gmail.com'
RtoSge::toSge(cores = cores,
name = name,
queue = queue,
log = log,
script = script,
email = email)
}
devtools::load_all('/imppc/labs/lplab/share/marc/repos/ergWgsTools')
vcf_path <- '/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2'
vcf <- list.files(bam_path,
pattern = "_PASS.vcf$",
full.names = T)
vcf <- list.files(vcf_path,
pattern = "_PASS.vcf$",
full.names = T)
vcf_path <- '/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2'
vcf <- list.files(vcf_path,
pattern = "_PASS.vcf$",
full.names = T)
vcf
devtools::load_all('/imppc/labs/lplab/share/marc/repos/ergWgsTools')
vcf_path <- '/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2'
vcf <- list.files(vcf_path,
pattern = "\\*_PASS.vcf$",
full.names = T)
vcf
vcf <- list.files(vcf_path,
pattern = "\\_PASS.vcf$",
full.names = T)
vcf
vcf <- list.files(vcf_path,
pattern = "_PASS.vcf$",
full.names = T)
vcf
?Sys.glob
glob2rx("\\_PASS.vcf$")
vcf <- list.files(vcf_path,
pattern = glob2rx("\\_PASS.vcf$"),
full.names = T)
vcf
vcf <- list.files(vcf_path,
pattern = glob2rx("*_PASS\\.vcf$"),
full.names = T)
vcf
vcf <- list.files(vcf_path,
pattern = "*_PASS\\.vcf$",
full.names = T)
vcf
vcf <- list.files(vcf_path,
pattern = "\\.vcf$",
full.names = T)
vcf
vcf_path
vcf <- list.files(vcf_path,
pattern = "\\..vcf$",
full.names = T)
vcf
vcf <- list.files(vcf_path,
pattern = "\\.vcf$",
full.names = T)
vcf
vcf <- list.files(vcf_path,
pattern = "\\*_PASS.vcf$",
full.names = T,
recursive = T)
vcf
list.files('/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2/NET-41_out_strelka2/results/variants',
pattern ="\\*._PASS.vcf",
full.names = T)
list.files('/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2/NET-41_out_strelka2/results/variants',
pattern ="\\._PASS.vcf",
full.names = T)
list.files('/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2/NET-41_out_strelka2/results/variants',
pattern ="\\*._PASS.vcf",
full.names = T)
list.files('/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2/NET-41_out_strelka2/results/variants',
pattern = Sys.glob("*._PASS.vcf")
full.names = T)
list.files('/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2/NET-41_out_strelka2/results/variants',
pattern = Sys.glob("*._PASS.vcf"),
full.names = T)
list.files('/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2/NET-41_out_strelka2/results/variants',
pattern = Sys.glob("*_PASS.vcf"),
full.names = T)
list.files('/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2/NET-41_out_strelka2/results/variants',
pattern = "*\\_PASS\\.vcf",
full.names = T)
vcfs <- list.files(vcf_path,
pattern = "*\\_PASS\\.vcf",
full.names = T,
recursive = T)
vcfs
devtools::load_all('/imppc/labs/lplab/share/marc/repos/ergWgsTools')
vcf_path <- '/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2'
vcfs <- list.files(vcf_path,
pattern = "*\\_PASS\\.vcf",
full.names = T,
recursive = T)
for(vcf in vcfs){
# postCalling
cores = 1
name = paste0(sample_name, '_postCalling')
queue = 'imppcv3'
log = '/imppc/labs/lplab/share/marc/insulinomas/logs'
script = paste('Rscript /imppc/labs/lplab/share/marc/repos/ergWgsTools/tmp/postCalling.R',
vcf)
email = 'clusterigtpmsubirana@gmail.com'
RtoSge::toSge(cores = cores,
name = name,
queue = queue,
log = log,
script = script,
email = email)
}
devtools::load_all('/imppc/labs/lplab/share/marc/repos/ergWgsTools')
vcf_path <- '/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2'
vcfs <- list.files(vcf_path,
pattern = "*\\_PASS\\.vcf",
full.names = T,
recursive = T)
for(vcf in vcfs){
sample_name <- gsub("_.*", '', basename(bam))
# postCalling
cores = 1
name = paste0('pC_', sample_name)
queue = 'imppcv3'
log = '/imppc/labs/lplab/share/marc/insulinomas/logs'
script = paste('Rscript /imppc/labs/lplab/share/marc/repos/ergWgsTools/tmp/postCalling.R',
vcf)
email = 'clusterigtpmsubirana@gmail.com'
RtoSge::toSge(cores = cores,
name = name,
queue = queue,
log = log,
script = script,
email = email)
}
sample_name <- gsub("_.*", '', basename(vcf))
sample_name
paste0('pC_', sample_name)
devtools::load_all('/imppc/labs/lplab/share/marc/repos/ergWgsTools')
vcf_path <- '/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2'
vcfs <- list.files(vcf_path,
pattern = "*\\_PASS\\.vcf",
full.names = T,
recursive = T)
for(vcf in vcfs){
sample_name <- gsub("_.*", '', basename(vcf))
# postCalling
cores = 1
name = paste0('pC_', sample_name)
queue = 'imppcv3'
log = '/imppc/labs/lplab/share/marc/insulinomas/logs'
script = paste('Rscript /imppc/labs/lplab/share/marc/repos/ergWgsTools/tmp/postCalling.R',
vcf)
email = 'clusterigtpmsubirana@gmail.com'
RtoSge::toSge(cores = cores,
name = name,
queue = queue,
log = log,
script = script,
email = email)
}
?grep
vcf <- '/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2/NET-11_out_strelka2/results/variants/NET-11_out_strelka2_indels_postCalling.vcf'
read.table(vcf)
vcf <- '/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2/NET-11_out_strelka2/results/variants/NET-11_out_strelka2_indels_postCalling.vcf'
read.table(vcf)
x <- read.table(vcf)
grep(x = x, pattern = "##", invert = T)
x[grep(x = x, pattern = "##", invert = T)]
vcf <- '/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2/NET-11_out_strelka2/results/variants/NET-11_out_strelka2_indels_postCalling.vcf'
corrected_vcf <- gsub("\\.vcf", "_corr.vcf", vcf)
system(paste('cat', vcf,
'| grep -v "##"',
'| awk \'{print $1"\t"$2"\t"$2"\t"$4"\t"$5"\t"$6"\t"$7"\t"$8"\t"$9"\t"$10"\t"$11}\'',
'>', corrected_vcf))
system(paste(perl, file.path(annovar, 'table_annovar.pl'),
corrected_vcf,
humandb,
'-buildver hg38',
'-out', out_vcf,
'-remove',
'-nastring NA',
'-thread', cores,
'-protocol',
#geneanno
paste0('refGene,',
#filter based
'exac03,avsnp150,dbnsfp33a'),
'-operation g,f,f,f'))
vcf <- '/imppc/labs/lplab/share/marc/insulinomas/processed/hg38/vcf/strelka2/strelka2/NET-11_out_strelka2/results/variants/NET-11_out_strelka2_indels_postCalling.vcf'
out_vcf <- gsub('_postCalling.vcf', '_annovarann.vcf')
out_vcf <- gsub('_postCalling.vcf', '_annovarann.vcf', vcf)
annovarAnnotation <- function(vcf,
out_vcf,
cores,
annovar='/imppc/labs/lplab/share/bin/annovar',
humandb='/imppc/labs/lplab/share/bin/annovar/humandb',
perl='perl'){
corrected_vcf <- gsub("\\.vcf", "_corr.vcf", vcf)
system(paste('cat', vcf,
'| grep -v "##"',
'| awk \'{print $1"\t"$2"\t"$2"\t"$4"\t"$5"\t"$6"\t"$7"\t"$8"\t"$9"\t"$10"\t"$11}\'',
'>', corrected_vcf))
# genebased annotation function, which annotates variants to coding and non-coding genes and
# indicates the amino acids that are affected
# annotation using three main databases: Ensembl, RefSeq and UCSC Known Gene
# Filter based annotation includes annotation to certain databases, such as gnomAD,
# dbSNP, and prediction programs to evaluate pathogenicity
system(paste(perl, file.path(annovar, 'table_annovar.pl'),
corrected_vcf,
humandb,
'-buildver hg38',
'-out', out_vcf,
'-remove',
'-nastring NA',
'-thread', cores,
'-protocol',
#geneanno
paste0('refGene,',
#filter based
'exac03,avsnp150,dbnsfp33a'),
'-operation g,f,f,f'))
unlink(corrected_vcf)
}
annovarAnnotation(vcf = vcf,
out_vcf = out_vcf,
cores = 6)
devtools::document()
devtools::document()
devtools::document()
?bwaAlignment
devtools::load_all('/imppc/labs/lplab/share/marc/repos/ergWgsTools')
devtools::load_all()
exists(type_input_file)
# define input type
type_input_file <- if(any(c('fastq', 'fq', 'gz') %in% unlist(strsplit(input_file, ".", fixed = TRUE)))) 'fastq'
input_file = fastq
fastq = "/imppc/labs/lplab/share/marc/insulinomas/raw/fastq/NET-17_BL_R1.fq.gz"
input_file = fastq
# define input type
type_input_file <- if(any(c('fastq', 'fq', 'gz') %in% unlist(strsplit(input_file, ".", fixed = TRUE)))) 'fastq'
type_input_file <- if(any('bam' %in% unlist(strsplit(input_file, ".", fixed = TRUE)))) 'bam'
if(exists(type_input_file)){message('Error: file should be BAM or FASTQ type')}
exists(type_input_file)
?exists
type_input_file
type_input_file
type_input_file
input_file
any(c('fastq', 'fq', 'gz') %in% unlist(strsplit(input_file, ".", fixed = TRUE)))
# define input type
type_input_file <- if(any(c('fastq', 'fq', 'gz') %in% unlist(strsplit(input_file, ".", fixed = TRUE)))) 'fastq'
type_input_file
# define input type
type_input_file <- if(any(c('fastq', 'fq', 'gz') %in% unlist(strsplit(input_file, ".", fixed = TRUE)))) 'fastq'
type_input_file
type_input_file
csv_file <- '/home/msg/Documents/igtp/insulinomas/rename_pnets.csv'
csv <- read.csv(csv_file)
csv
csv <- read.csv(csv_file, header = F)
csv
colnames(csv) <- c('icgc_name', 'erg_name')
i = 1
paste0('rename ',
'\'s/',
csv$icgc_name[i],
'/', csv$erg_name[i],
'/\' ',
path, '/*')
path <- '/home/labs/lplab/msubirana/Desktop/icgc_downloads'
paste0('rename ',
'\'s/',
csv$icgc_name[i],
'/', csv$erg_name[i],
'/\' ',
path, '/*')
path <- '..'
input_file <- '/imppc/labs/lplab/share/marc/insulinomas/raw/fastq/NET-17_BL_R1.fq.gz'
# define fastq type
name_non_ext <- basename(gsub("\\..*", "", (input_file)))
# define fastq type
name_non_ext <- basename(gsub("\\..*", "", (input_file)))
name_non_ext
sm_name <- gsub('_R1', '', name_non_ext)
sm_name
read.table('~/Desktop/INS_REs.bed')
ins <- read.table('~/Desktop/INS_REs.bed')
ins
ins[ins$4 %in% c('enh_75064',
'enh_138259'
)]
ins[ins$4 %in% c('enh_75064',
'enh_138259'),]
ins[ins$V4 %in% c('enh_75064',
'enh_138259'),]
read.table('~/Desktop/hg38_3mer.regions.tsv')
read.table('~/Desktop/hg38_3mer.regions.tsv', header = T)
mer_regions-read.table('~/Desktop/hg38_3mer.regions.tsv', header = T)
mer_regions <- read.table('~/Desktop/hg38_3mer.regions.tsv', header = T)
ins <- read.table('~/Desktop/INS_REs.bed')
ins$V5 <- NULL
colnames(ins) <- c('CHROMOSOME','START','END','ELEMENT_ID')
ins
head(ins)
head(mer_regions)
mer_regions$CHROMOSOME <- paste0('chr', mer_regions$CHROMOSOME)
mer_regions
mer_regions$CHROMOSOME[1]
ins[ins$CHROMOSOME == mer_regions$CHROMOSOME[1],]
ins[(ins$CHROMOSOME == mer_regions$CHROMOSOME[1]) & (ins$END > mer_regions$END),]
mer_regions$END
ins[(ins$CHROMOSOME == mer_regions$CHROMOSOME[1]) & (ins$END > mer_regions$END[1]),]
for(i in nrow(mer_regions)){
ins[(ins$CHROMOSOME == mer_regions$CHROMOSOME[1]) & (ins$END > mer_regions$END[1]),]
}
for(i in nrow(mer_regions)){
message(ins[(ins$CHROMOSOME == mer_regions$CHROMOSOME[1]) & (ins$END > mer_regions$END[1]),])
}
nrow(mer_regions)
seq_len(nrow(mer_regions)
)
for(i in seq_len(nrow(mer_regions))){
message(ins[(ins$CHROMOSOME == mer_regions$CHROMOSOME[1]) & (ins$END > mer_regions$END[1]),])
}
ins[(ins$CHROMOSOME == mer_regions$CHROMOSOME[1]) & (ins$END > mer_regions$END[1]),]
ins[(ins$CHROMOSOME == mer_regions$CHROMOSOME[i]) & (ins$END > mer_regions$END[i]),]
ins[(ins$CHROMOSOME == mer_regions$CHROMOSOME[i]) & (ins$END > mer_regions$END[i]),]
for(i in seq_len(nrow(mer_regions))){
message(ins[(ins$CHROMOSOME == mer_regions$CHROMOSOME[i]) & (ins$END > mer_regions$END[i]),])
}
out_ranges <- data.frame()
out_ranges <- data.frame()
for(i in seq_len(nrow(mer_regions))){
tmp_df <- ins[(ins$CHROMOSOME == mer_regions$CHROMOSOME[i]) & (ins$END > mer_regions$END[i]),])
out_ranges <- rbind(out_ranges, tmp_df)
}
for(i in seq_len(nrow(mer_regions))){
tmp_df <- ins[(ins$CHROMOSOME == mer_regions$CHROMOSOME[i]) & (ins$END > mer_regions$END[i]),]
out_ranges <- rbind(out_ranges, tmp_df)
}
out_ranges
ins
max(ins$END)
mer_regions
for(i in seq_len(nrow(mer_regions))){
tmp_max <- max(ins[(ins$CHROMOSOME == mer_regions$CHROMOSOME[i])])
message(mer_regions$CHROMOSOME[i])
message(tmp_max)
}
for(i in seq_len(nrow(mer_regions))){
tmp_max <- max(ins[(ins$CHROMOSOME == mer_regions$CHROMOSOME[i]),])
message(mer_regions$CHROMOSOME[i])
message(tmp_max)
}
ins[(ins$CHROMOSOME == mer_regions$CHROMOSOME[i])
]
ins[ins$CHROMOSOME == mer_regions$CHROMOSOME[i],]
for(i in seq_len(nrow(mer_regions))){
tmp_max <- max(ins[ins$CHROMOSOME == mer_regions$CHROMOSOME[i],])
message(mer_regions$CHROMOSOME[i])
message(tmp_max)
}
max(ins[ins$CHROMOSOME == mer_regions$CHROMOSOME[i],])
ins[ins$CHROMOSOME == mer_regions$CHROMOSOME[i],]
max(ins$END[ins$CHROMOSOME == mer_regions$CHROMOSOME[i]])
for(i in seq_len(nrow(mer_regions))){
tmp_max <- max(ins$END[ins$CHROMOSOME == mer_regions$CHROMOSOME[i]])
message(mer_regions$CHROMOSOME[i])
message(tmp_max)
}
data.frame(c(mer_regions$CHROMOSOME[i],tmp_max))
t(data.frame(c(mer_regions$CHROMOSOME[i],tmp_max)))
max_end <- data.frame()
for(i in seq_len(nrow(mer_regions))){
tmp_max <- max(ins$END[ins$CHROMOSOME == mer_regions$CHROMOSOME[i],])
tmp_df <- t(data.frame(c(mer_regions$CHROMOSOME[i],tmp_max)))
max_end <- data.frame(max_end, tmp_df)
}
max_end
tmp_df
tmp_df <- t(data.frame(c(mer_regions$CHROMOSOME[i],tmp_max)))
tmp_df
max_end <- data.frame(max_end, tmp_df)
max_end <- data.frame()
max_end <- rbind(max_end, tmp_df)
max_end <- data.frame()
for(i in seq_len(nrow(mer_regions))){
tmp_max <- max(ins$END[ins$CHROMOSOME == mer_regions$CHROMOSOME[i],])
tmp_df <- t(data.frame(c(mer_regions$CHROMOSOME[i],tmp_max)))
max_end <- rbind(max_end, tmp_df)
}
max_end <- rbind(max_end, tmp_df)
max_end
i=2
tmp_max <- max(ins$END[ins$CHROMOSOME == mer_regions$CHROMOSOME[i],])
mer_regions$CHROMOSOME[i]
max(ins$END[ins$CHROMOSOME == mer_regions$CHROMOSOME[i]])
max_end <- data.frame()
for(i in seq_len(nrow(mer_regions))){
tmp_max <- max(ins$END[ins$CHROMOSOME == mer_regions$CHROMOSOME[i]])
tmp_df <- t(data.frame(c(mer_regions$CHROMOSOME[i],tmp_max)))
max_end <- rbind(max_end, tmp_df)
}
max_end
row.names(max_end) <- seq_len(nrow(max_end))
colnames(max_end) <- c('CHROMOSOME', 'END')
max_end
colnames(max_end) <- c('CHROMOSOME', 'END_SAMPLES')
dplyr::left_join(mer_regions, max_end)
mer_regions$CHROMOSOME <- as.character(mer_regions$CHROMOSOME)
dplyr::left_join(mer_regions, max_end)
max_end$CHROMOSOME <- as.character(max_end$CHROMOSOME)
max_end$END_SAMPLES <- as.numeric(max_end$END_SAMPLES)
max_end
max_end <- data.frame()
for(i in seq_len(nrow(mer_regions))){
tmp_max <- max(ins$END[ins$CHROMOSOME == mer_regions$CHROMOSOME[i]])
tmp_df <- t(data.frame(c(mer_regions$CHROMOSOME[i],tmp_max)))
max_end <- rbind(max_end, tmp_df)
}
row.names(max_end) <- seq_len(nrow(max_end))
colnames(max_end) <- c('CHROMOSOME', 'END_SAMPLES')
max_end$CHROMOSOME <- as.character(max_end$CHROMOSOME)
max_end$END_SAMPLES <- as.character(max_end$END_SAMPLES)
max_end
mer_regions$END <- as.character(mer_regions$END)
dplyr::left_join(mer_regions, max_end)
regions_merged <- dplyr::left_join(mer_regions, max_end)
regions_merged[regions_merged$END_SAMPLES > regions_merged$END]
ins
for(i in seq_len(nrow(mer_regions))){
tmp_min <- min(ins$END[ins$CHROMOSOME == mer_regions$CHROMOSOME[i]])
tmp_df <- t(data.frame(c(mer_regions$CHROMOSOME[i],tmp_min)))
min_end <- rbind(min_end, tmp_df)
}
min_end <- data.frame()
for(i in seq_len(nrow(mer_regions))){
tmp_min <- min(ins$END[ins$CHROMOSOME == mer_regions$CHROMOSOME[i]])
tmp_df <- t(data.frame(c(mer_regions$CHROMOSOME[i],tmp_min)))
min_end <- rbind(min_end, tmp_df)
}
min_end
row.names(min_end) <- seq_len(nrow(max_end))
colnames(min_end) <- c('CHROMOSOME', 'END_SAMPLES')
min_end
